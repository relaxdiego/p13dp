#!/usr/bin/env bash

set -e

# There is only one parameter to this script and that is the relative path
# to the config directory. All other arguments should be in the form of an
# entry in the configuration inside that dir.

# Check if the relative path is defined
if [ -z "$1" ]; then
    echo "Please run using \`$0 /path/to/cluster/config\`"
    exit 1
fi

config_relpath=${1%/}

# shift arguments to the left
shift

# Get this script's parent dir (the script/ dir)
script_path=$(dirname "${BASH_SOURCE[0]}")

source $script_path/lib/common

# Function calls below are defined in script/lib/common
config_abspath=$(get_config_abspath $config_relpath)

check_config_dir $config_abspath

# ================

cluster_id=$(get_cluster_id $config_abspath/vars.yml)
vault_pass_file=$(get_vault_pass_file $cluster_id)
vault_file=$(get_vault_file $config_abspath)

# Ensure directory exists
mkdir -p $(dirname $vault_pass_file)

#
# Initialize the vault password file if it doesn't exist
#
if [ ! -e "$vault_pass_file" ]; then
    echo -e "${yellow}Initializing vault password file:${normal} ${vault_pass_file}"

    echo "Please provide a password for encrypting/decrypting your config dir's vault."
    echo "Note that if you're sharing this config dir with your teammates then you must"
    echo "all share the same password."
    echo -e "Vault password [random]: \c"
    read vault_password

    if [ -z "$vault_password" ]; then
        echo "Generating random password"
        vault_password=$(uuidgen)
    fi

    echo "$vault_password" > $vault_pass_file
else
    echo -e "${green}Vault password file found:${normal} ${vault_pass_file}"
fi

#
# Initialize the vault itself if it doesn't exist
#
if [ ! -e "$vault_file" ]; then
    echo -e "${yellow}Initializing vault:${normal} ${vault_file}"
    echo "---" > $vault_file
    ansible-vault encrypt --vault-password-file=${vault_pass_file} ${vault_file}
else
    echo -e "${green}Vault file found:${normal} ${vault_file}"

    echo -e "${yellow}Attempting to read using vault password...${nofrmal}"

    if ! ansible-vault decrypt --vault-password-file=${vault_pass_file} ${vault_file} 1>/dev/null 2>&1; then
        echo -e "${red}ERROR:${normal} Unable to decrypt the vault. Was this encrypted with a different password?"
        exit 1
    fi

    ansible-vault encrypt --vault-password-file=${vault_pass_file} ${vault_file} 1>/dev/null 2>&1

    echo -e "${green}Vault file is readable${normal}"
fi

echo "Edit the vault via: script/edit-vault $config_relpath"
